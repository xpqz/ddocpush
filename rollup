#!/usr/bin/env python
#
# Roll up a set of listed databases into a single aggregate.

# The aggregated db will be created.

# Assumptions:

# 1. Aggregator lives under the same account
# 2. Credentials sufficient to create replications
# 3. Credentials sufficient to create databases
# 4. Credentials passed as environment variables COUCHDB_USER and COUCHDB_PW
# 5. All dbs to roll up exist.
# 6. Given target db name is a valid CouchDB dababase name.


import argparse
import os
import requests
import sys

parser = argparse.ArgumentParser(
    description="Roll up multiple databases into an aggregate."
)
parser.add_argument("databases", metavar="N", type=str, nargs="+",
                    help="a database to roll up")
parser.add_argument("--baseurl", type=str, required=True,
                    help="URL for the account")
parser.add_argument("--target", type=str, required=True,
                    help="target database name (will be created)")

args = parser.parse_args()

baseurl = args.baseurl.rstrip("/")
if not baseurl.startswith("https://"):
    print("https only.")
    exit(1)

base = baseurl[len("https://"):]

try:
    user = os.environ["COUCHDB_USER"]
    passw = os.environ["COUCHDB_PW"]
except KeyError:
    print(f"Expected creds in environment variables 'COUCHDB_USER' and 'COUCHDB_PW'")
    exit(1)

session = requests.Session()
session.auth = (user, passw)

# Create the target DB
response = session.put(f"{baseurl}/{args.target}")
response.raise_for_status()

print(f"Created database {args.target}", file=sys.stderr)

# Set off replications for each of the arg.databases to the target
for db in args.databases:
    response = session.post(
        f"{baseurl}/_replicate",
        json={
            "source": f"https://{user}:{passw}@{base}/{db}",
            "target": f"https://{user}:{passw}@{base}/{args.target}"
        }
    )
    response.raise_for_status()
    print(f" -- Replicating {db} -> {args.target}", file=sys.stderr)
